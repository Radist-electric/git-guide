import React from 'react'
import Select from '../../select/Select'
import Multiselect from '../../select/Multiselect'

// let gitInit = [
//   {
//     command: 'git init',
//     input: [],
//     description: 'Инициализация пустого Git-репозитория в текущей папке. Создаётся скрытая папка .git со стартовым набором рабочих файлов и папок.'
//   },
//   {
//     command: 'git init [folder_name]',
//     input: [
//       'Имя папки'
//     ],
//     description: 'В текущей папке создаётся новая папка с именем [input]. В ней происходит инициализация пустого Git-репозитория, т.е. создаётся скрытая папка .git со стартовым набором рабочих файлов и папок.'
//   },
//   {
//     command: 'git init --bare',
//     input: [],
//     description: 'Создаётся „голый“ репозиторий в текущей папке. Этот новый "голый" репозитоий представляет из себя стартовый набор рабочих файлов и папок Git.'
//   },
//   {
//     command: 'git init --bare [folder_name]',
//     input: [
//       'Имя папки'
//     ],
//     description: 'Создаётся новая папка с именем [input], а внутри этой папки создаётся „голый“ репозиторий. Он представляет из себя стартовый набор рабочих файлов и папок Git.'
//   }
// ];
// let gitStatus = [
//   {
//     command: 'git status',
//     input: [],
//     description: 'Показывает текущее состояние репозитория. Выводит список изменений и перечень файлов, которые ожидают коммита.'
//   },
//   {
//     command: 'git status -s',
//     input: [],
//     description: 'Показывает текущее состояние репозитория. Выводит краткий список изменений и перечень файлов, которые ожидают коммита.'
//   }
// ];
// let gitAdd = [
//   {
//     command: 'git add',
//     input: true,
//     inputPlaceholder: 'Имя файла вместе с расширением, например main.js',
//     descWithoutInput: 'Добавляет выбранный файл в index (индексирование выбранного файла). Подготовка файла для коммита.',
//     descWithInput: 'Добавляет конкретный файл, имя которого вы ввели, в index (индексирование выбранного файла). Подготовка файла для коммита.'
//   },
//   {
//     command: 'git add *.',
//     input: true,
//     splice: true,
//     inputPlaceholder: 'Добавьте расширение файла, например sass',
//     descWithoutInput: 'Добавляет файлы определённого типа в index (индексирование файлов определённого типа). Подготовка файлов для коммита.',
//     descWithInput: 'Добавляет файлы того типа, который вы ввели, в index (индексирование файлов выбранного вами типа). Подготовка файлов для коммита.'
//   },
//   {
//     command: 'git add .',
//     input: false,
//     descWithoutInput: 'Добавляет в index изменённые и новые файлы и убирает из index удаленные файлы. Подготовка всех изменённых файлов для коммита.'
//   },
//   {
//     command: 'git add -A',
//     input: false,
//     descWithoutInput: 'Добавляет все файлы и папки текущей директории в index (индексирование всех файлов). Подготовка всех файлов для коммита.'
//   },
//   {
//     command: 'git add -u',
//     input: false,
//     descWithoutInput: 'Добавляет только отслеживаемые файлы и папки текущей директории в index (индексирование отслеживаемых файлов). То есть добавляет в index только изменённые и удалённые файлы и папки, новые не трогает. Подготовить отслеживаемые файлы для коммита.'
//   },
// ];
// let gitCommit = [
//   {
//     command: 'git commit',
//     input: false,
//     descWithoutInput: 'Записать проиндексированные изменения в репозиторий. Текстовый комментарий обязателен, поэтому откроется редактор, выбранный по умолчанию. Напишите там своё сообщение и сохраните.'
//   },
//   {
//     command: 'git commit -a',
//     input: false,
//     descWithoutInput: 'Перед выполнение коммита будут занесены в индекс все отслеживаемые файлы. Новые файлы не индексируются. Далее все проиндексированные изменения записываются в репозиторий. Текстовый комментарий обязателен, поэтому откроется редактор, выбранный по умолчанию. Напишите там своё сообщение и сохраните.'
//   },
//   {
//     command: 'git commit -m',
//     input: true,
//     quote: '"',
//     inputPlaceholder: 'Текст сообщения',
//     descWithoutInput: 'Записать проиндексированные изменения в репозиторий. Текстовый комментарий обязателен, поэтому коммит будет проигнорирован, если сообщение пустое.',
//     descWithInput: 'Записать проиндексированные изменения в репозиторий. Текстовый комментарий, который Вы написали, будет добавлен в команду.'
//   },
//   {
//     command: 'git commit -a -m',
//     input: true,
//     quote: '"',
//     inputPlaceholder: 'Текст сообщения',
//     descWithoutInput: 'Перед выполнение коммита будут занесены в индекс все отслеживаемые файлы. Новые файлы не индексируются. Текстовый комментарий обязателен, поэтому коммит будет проигнорирован, если сообщение пустое.',
//     descWithInput: 'Перед выполнение коммита будут занесены в индекс все отслеживаемые файлы. Новые файлы не индексируются. Текстовый комментарий, который Вы написали, будет добавлен в команду. Далее проиндексированные изменения записываются в репозиторий.'
//   }
// ];
// let gitHelp = [
//   {
//     command: 'git help [command]',
//     input: [
//       'Команда git, например, merge'
//     ],
//     description: 'В браузере откроется локальная страница с подробным описанием выбранной команды [input].'
//   }
// ];
// let gitConfig = [
//   {
//     command: 'git config --global user.name',
//     input: [],
//     description: 'Вывести имя пользователя, которое было задано ранее.'
//   },
//   {
//     command: 'git config --global user.name [name]',
//     input: [
//       'Имя пользователя'
//     ],
//     description: 'Указать имя пользователя [input]. По этому имени можно будет отследить, кто выполнял коммиты.'
//   },
//   {
//     command: 'git config --global user.email',
//     input: [],
//     description: 'Вывести электронную почту пользователя, которая была задана ранее.'
//   },
//   {
//     command: 'git config --global user.email [email]',
//     input: [
//       'Электронная почта пользователя'
//     ],
//     description: 'Указать электронную почту пользователя [input]. Эта информация будет добавляться коммиты.'
//   },
// ];

const Basic = (props) => {
  const data = props.data

  return (
    <>
      <h2>Базовые команды</h2>
      <Multiselect data={data.gitInit} />
      <Multiselect data={data.gitStatus} />
      <Select data={data.gitAdd} />
      <Select data={data.gitCommit} />
      <Multiselect data={data.gitHelp} />
      <Multiselect data={data.gitConfig} />
    </>
  )
}

export default Basic